print("""Elaborado por: Richard Herkt
        Fecha: 30/5/2024
        Carrera: Ing. Sistemas de la Informaci√≥n  
        Ing.Edison Emeneses\n""")
print("""
‚ñê‚ñì‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñì‚ñå‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñë
‚ñê‚ñì‚ñà‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñà‚ñì‚ñå‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë
‚ñê‚ñì‚ñà‚ñë‚ñë‚ñÑ‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñà‚ñì‚ñå‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë
‚ñê‚ñì‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñì‚ñå‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë
‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë
\n""")

import time
import pandas as pd
import bisect  # Importamos el m√≥dulo 'bisect' que permite trabajar con listas ordenadas de forma eficiente
# Importamos 'matplotlib.pyplot' como 'plt' para crear gr√°ficos y visualizar resultados
import matplotlib.pyplot as plt

# Importamos 'matplotlib.pyplot' como 'plt' para crear gr√°ficos y visualizar resultados
import matplotlib.pyplot as plt

# Importamos 'tqdm' para mostrar barras de progreso mientras se ejecutan ciclos largos
from tqdm import tqdm

# Importamos 'clear_output' desde IPython.display para limpiar la salida en consola o en Jupyter
# Esto es √∫til para crear animaciones que actualizan la misma celda repetidamente
from IPython.display import clear_output

# Tambi√©n importamos el m√≥dulo 'time' con un alias 't' para usarlo independientemente si lo necesitamos
# (por ejemplo, usar t.sleep(0.3) en lugar de time.sleep(0.3) si queremos evitar conflictos o duplicaci√≥n)
import time as t


# Importamos 'clear_output' desde IPython.display para limpiar la salida en consola o en Jupyter
# Esto es √∫til para crear animaciones que actualizan la misma celda repetidamente
from IPython.display import clear_output

# Tambi√©n importamos el m√≥dulo 'time' con un alias 't' para usarlo independientemente si lo necesitamos
# (por ejemplo, usar t.sleep(0.3) en lugar de time.sleep(0.3) si queremos evitar conflictos o duplicaci√≥n)
import time as t



import random
notas = random.sample(range(0, 21), 15)  # 15 notas entre 0 y 20 sin repetidos
print(" Notas originales:", notas)


# Par√°metros:
# - lista: la lista de n√∫meros a ordenar
# - mostrar_pasos (bool): si es True, se guardar√°n los estados intermedios para animaci√≥n
# - pausa (float): tiempo en segundos entre pasos, √∫til si se usa para animar (aunque aqu√≠ no se usa directamente)
def bubble_sort_viz(lista, mostrar_pasos=False, pausa=0.3):

    # Creamos una copia de la lista para no modificar la original
    lista = lista.copy()

    # Inicializamos contadores para registrar la cantidad de comparaciones e intercambios
    comparaciones = 0
    intercambios = 0

    # Guardamos la longitud de la lista
    n = len(lista)

    # Lista donde se almacenar√°n los pasos intermedios (solo si mostrar_pasos=True)
    pasos = []

    # Bucle externo que recorre toda la lista
    for i in range(n):
        # Bucle interno que compara elementos adyacentes
        for j in range(0, n - i - 1):
            # Cada vez que se comparan dos elementos, se incrementa el contador de comparaciones
            comparaciones += 1

            # Si el elemento actual es mayor que el siguiente, se deben intercambiar
            if lista[j] > lista[j + 1]:
                # Intercambio de los elementos
                lista[j], lista[j + 1] = lista[j + 1], lista[j]

                # Incrementamos el contador de intercambios
                intercambios += 1

                # Si mostrar_pasos es True, guardamos el estado actual de la lista (despu√©s del intercambio)
                pasos.append(lista.copy())

    # Al finalizar, retornamos:
    # - La lista ordenada
    # - El n√∫mero total de comparaciones
    # - El n√∫mero total de intercambios
    # - La lista de pasos intermedios (puede estar vac√≠a si mostrar_pasos=False)
    return lista, comparaciones, intercambios, pasos


tama√±os = [10, 50, 100, 200]  # Lista con diferentes tama√±os de entrada que vamos a probar

# Lista donde almacenaremos los resultados (comparaciones, intercambios y tiempo por tama√±o)
resultados = []

# Usamos tqdm para mostrar una barra de progreso mientras se ejecuta el ciclo
for tam in tqdm(tama√±os):

    # Generamos una lista aleatoria de 'tam' elementos, sin repetidos, en un rango proporcional
    lista = random.sample(range(1, tam * 10), tam)

    # Medimos el tiempo justo antes de ejecutar el algoritmo
    inicio = time.time()

    # Ejecutamos bubble_sort_viz pero no nos interesa la lista final ni los pasos,
    # solo las estad√≠sticas de comparaciones e intercambios
    _, comp, interc, _ = bubble_sort_viz(lista)

    # Medimos el tiempo al finalizar
    fin = time.time()
    
    
  
#########################################################################################

# üé• Funci√≥n para animar Bubble Sort paso a paso
def animar_bubble_sort(pasos):
    # Recorremos cada estado intermedio guardado del algoritmo
    for estado in pasos:
        # Limpiamos la salida anterior de la celda para simular una animaci√≥n continua
        clear_output(wait=True)

        # Dibujamos una gr√°fica de barras representando el estado actual de la lista
        plt.bar(range(len(estado)), estado, color='skyblue')

        # Agregamos t√≠tulo y etiquetas a la gr√°fica
        plt.title("Animaci√≥n Bubble Sort")
        plt.xlabel("√çndice")  # Eje X representa las posiciones de la lista
        plt.ylabel("Valor")   # Eje Y representa el valor de cada elemento

        # Pausamos por 0.3 segundos antes de pasar al siguiente paso para que se vea el movimiento
        plt.pause(0.3)

    # Al finalizar, mostramos la √∫ltima imagen sin limpiar
    plt.show()


# üß™ Creamos una lista peque√±a de 10 elementos aleatorios entre 1 y 30 para que la animaci√≥n sea clara
lista_demo = random.sample(range(1, 30), 10)

# Ejecutamos bubble_sort_viz con mostrar_pasos=True para capturar cada paso intermedio
_, _, _, pasos_animacion = bubble_sort_viz(lista_demo, mostrar_pasos=True)

# Llamamos a la funci√≥n de animaci√≥n con los pasos registrados
animar_bubble_sort(pasos_animacion)


################################################################################################

#üéûÔ∏è Funci√≥n que anima y compara visualmente el proceso de ordenamiento de:
# - Bubble Sort (real, paso a paso)
# - sorted() (simulado, para efectos did√°cticos)
def animar_comparacion_sorted_bubble_simulada(lista_original, pausa=0.2):

    # Creamos una copia de la lista original para Bubble Sort
    lista_bubble = lista_original.copy()

    # Calculamos el resultado final de sorted() (lista ordenada) para simularlo paso a paso
    lista_sorted_final = sorted(lista_original)

    # Inicializamos la lista de pasos del algoritmo Bubble Sort (comenzamos con el estado original)
    pasos_bubble = [lista_bubble.copy()]

    # Lista de pasos para simular el comportamiento de sorted()
    pasos_sorted = []

    # üîÑ Generamos los pasos reales de Bubble Sort
    n = len(lista_bubble)
    for i in range(n):
        for j in range(0, n - i - 1):
            if lista_bubble[j] > lista_bubble[j + 1]:
                # Intercambiamos los elementos si est√°n fuera de orden
                lista_bubble[j], lista_bubble[j + 1] = lista_bubble[j + 1], lista_bubble[j]
                # Guardamos el estado actual despu√©s del intercambio
                pasos_bubble.append(lista_bubble.copy())

    # üß™ Simulamos c√≥mo se ver√≠a el progreso de sorted() paso a paso
    # Aunque sorted() es inmediato, aqu√≠ lo representamos como una transformaci√≥n progresiva
    lista_simulada = lista_original.copy()
    for i in range(len(lista_sorted_final)):
        if lista_simulada[i] != lista_sorted_final[i]:
            # Sustituimos el valor por el que estar√≠a en la lista ordenada
            lista_simulada[i] = lista_sorted_final[i]
        # Guardamos el paso simulado
        pasos_sorted.append(lista_simulada.copy())

    # Definimos el n√∫mero total de pasos que tendr√° la animaci√≥n (el mayor entre ambos procesos)
    total_pasos = max(len(pasos_bubble), len(pasos_sorted))

    # üñºÔ∏è Animaci√≥n paso a paso
    for k in range(total_pasos):
        clear_output(wait=True)  # Limpiamos la salida anterior para crear efecto de movimiento

        # Creamos una figura con dos gr√°ficos uno al lado del otro
        fig, axs = plt.subplots(1, 2, figsize=(12, 4))

        # üé¨ Animaci√≥n de Bubble Sort (proceso real)
        if k < len(pasos_bubble):
            axs[0].bar(range(len(pasos_bubble[k])), pasos_bubble[k], color='skyblue')
            axs[0].set_title(f"Bubble Sort - Paso {k+1}")
            axs[0].set_ylim(0, max(lista_original) + 5)
        else:
            # Si se terminaron los pasos, mantenemos la vista final
            axs[0].bar(range(len(pasos_bubble[-1])), pasos_bubble[-1], color='skyblue')
            axs[0].set_title("Bubble Sort - Final")

        # üé¨ Simulaci√≥n animada de sorted() (transformaci√≥n progresiva)
        if k < len(pasos_sorted):
            axs[1].bar(range(len(pasos_sorted[k])), pasos_sorted[k], color='lightgreen')
            axs[1].set_title(f"sorted() - Paso {k+1}")
            axs[1].set_ylim(0, max(lista_original) + 5)
        else:
            axs[1].bar(range(len(lista_sorted_final)), lista_sorted_final, color='lightgreen')
            axs[1].set_title("sorted() - Final")

        # Acomoda ambos subgr√°ficos para que no se encimen
        plt.tight_layout()

        # Pausa entre cada frame para que la animaci√≥n sea visible
        plt.pause(pausa)

    # Muestra la √∫ltima imagen est√°tica al terminar
    plt.show()


# üé≤ Generamos una lista aleatoria con 20 n√∫meros √∫nicos entre 1 y 50
# Usamos una lista m√°s grande que en los ejemplos anteriores para que la animaci√≥n
# del ordenamiento sea m√°s notoria, visualmente atractiva y educativa.
lista_demo = random.sample(range(1, 50), 20)

# üéûÔ∏è Ejecutamos la funci√≥n de animaci√≥n comparativa simulada
# Esta funci√≥n mostrar√° lado a lado:
# - A la izquierda: el proceso real paso a paso del algoritmo Bubble Sort.
# - A la derecha: una simulaci√≥n paso a paso de c√≥mo `sorted()` ir√≠a construyendo la lista ordenada.
animar_comparacion_sorted_bubble_simulada(lista_demo)

########################################################################################################

opcion=input("Desea Ingresar una nueva nota ?? SI(S) o NO(N)..").upper()

while opcion != "S" and opcion != "NO":
    print("Ingrese SI(S) o NO(N)..")
    opcion=input("Desea Ingresar una nueva nota ?? SI(S) o NO(N)..").upper()
if opcion =="S":
    nueva_nota = int(input("Ingrese la nota.."))  # puedes cambiar o pedir por input
    bisect.insort(notas, nueva_nota)
    print("‚úÖ Lista despu√©s de insertar la nueva nota:", notas)

else:
    print("OK")
    
    
opcion1=input("Desea buscar una nota? SI(?) o NO(N)").upper()
while opcion != "S" and opcion != "NO":
    print("Ingrese SI(S) o NO(N)..")
    opcion=input("Desea Ingresar una nueva nota ?? SI(S) o NO(N)..").upper()
    
if opcion =="S":
    nota_buscar = int(input("Ingrese la nota que desea buscar..")) # puedes cambiar o pedir por input
    posicion = bisect.bisect_left(notas, nota_buscar)
    if posicion < len(notas) and notas[posicion] == nota_buscar:
        print(f"üîç La nota {nota_buscar} se encuentra en la posici√≥n {posicion}")
    else:
        print(f"‚ùå La nota {nota_buscar} no est√° en la lista.")
        
else:
    print("Gracias por usar el programa..")
    
    
    
# Escribe aqu√≠ tu reflexi√≥n final:
# ¬øQu√© m√©todo te pareci√≥ m√°s eficiente o claro para ordenar?

# Sorted siempre ser√° el mejor m√©todo para ordenar debido a que es un proceso auto√°tico que funciona de manera r√°pida y eficiente
#Booble sort por su parte es un m√©todo mec√°nico el cual en listas grandes llega a ser muy ineficiente y lento

# ¬øCrees que es √∫til visualizar el proceso de ordenamiento?

# No, debido a que nos sirve √∫nicamente para monitorear el funcionamieneto de nuestro ordenamiento
# No implementa ninguna funcionalidad a nuestro proceso principal